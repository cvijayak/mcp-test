@model CMS.Mcp.Client.Contracts.Models.TokenInfoViewModel
@{
    ViewData["Title"] = "MCP Chat";
    var serverOptions = Model.ServerOptions;
}

<div id="chat-app-container" class="chat-app-container">
    <div class="chat-app-row">
        <div class="chat-main">
            <div class="chat-header d-flex justify-content-between align-items-center p-3 border-bottom">
                <div class="d-flex align-items-center">
                    <div class="app-logo d-flex align-items-center me-3">
                        <i class="fas fa-robot fa-lg me-2"></i>
                        <h5 class="mb-0 fw-bold">CMS AI Assistant</h5>
                    </div>
                    <!-- MCP Tools button moved to layout navigation -->
                </div>
                <div class="d-flex align-items-center">
                    <button id="clearChatBtn" class="btn btn-link text-danger" title="Clear conversation">
                        <i class="fas fa-trash fa-lg"></i>
                    </button>
                    <div id="mcpToolsContainer" class="d-none ms-3">
                        <h5>MCP Tools</h5>
                        <ul id="mcpToolsList" class="list-group"></ul>
                    </div>
                </div>
            </div>
            
            <div id="chatContainer" class="chat-container">
                <div id="chatMessages" class="chat-messages"></div>
                <div id="loadingIndicator" class="d-none text-center my-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            
            <div class="chat-suggestions-container" id="suggestionsContainer" style="display: block;">
                <!-- Suggestions will be populated here -->
                <div class="chat-suggestions-title">Suggestions:</div>
                <div class="chat-suggestions" id="suggestionsList"></div>
            </div>
            
            <div class="chat-input-container">
                <div class="row mb-2">
                    <div class="col-md-12">
                        <div class="d-flex align-items-center">
                            <label for="serverSelect" class="me-2">Server:</label>
                            <select id="serverSelect" class="form-select form-select-sm" style="max-width: 200px;">
                                @foreach (var server in serverOptions)
                                {
                                    <option value="@server">@server</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." />
                    <button id="sendMessageBtn" class="btn btn-primary px-4">
                        <span id="sendBtnText"><i class="fas fa-paper-plane me-2"></i> Send</span>
                        <span id="sendBtnLoading" class="d-none">
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Processing...
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Reset and base styles */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        
        /* Header buttons style */
        #clearChatBtn, #getMcpToolsBtn {
            font-size: 1.1rem;
            padding: 5px;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            position: relative;
            z-index: 100;
            pointer-events: auto;
        }
        
        #clearChatBtn:hover {
            background-color: rgba(220, 53, 69, 0.1);
        }
        
        #getMcpToolsBtn:hover {
            background-color: rgba(13, 110, 253, 0.1);
        }
        /* We're handling overflow in layout now, so removing this
        body {
            overflow-y: hidden;
        }*/

        /* Main container styles */
        .chat-app-container {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            z-index: 1;
            pointer-events: auto; /* Ensure clicks work properly */
        }

        /* Row layout */
        .chat-app-row {
            display: flex;
            height: 100%;
            width: 100%;
            position: relative;
        }

        /* App logo styles in header */
        .app-logo {
            padding: 5px 10px;
            border-radius: 6px;
        }
        
        .app-logo .fa-robot {
            color: var(--primary-blue);
            filter: drop-shadow(0 2px 3px rgba(0,0,0,0.1));
        }
        
        .fa-rotate-180 {
            transform: rotate(180deg);
        }

        /* Main chat area styles */
        .chat-main {
            display: flex;
            flex-direction: column;
            height: 100%;
            width: 100%;
            overflow: hidden;
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            pointer-events: auto; /* Ensure clicks are captured correctly */
        }

        /* Header styles */
        .chat-header {
            flex: 0 0 auto;
            background-color: var(--white, #ffffff);
            border-bottom: 1px solid var(--light-blue, #d0d7de);
            z-index: 1;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 10px 15px;
        }

        /* Chat container styles */
        .chat-container {
            flex: 1 1 auto;
            overflow-y: auto;
            border: 1px solid var(--light-blue, #d0d7de);
            border-radius: 8px;
            padding: 15px;
            background-color: white;
            box-shadow: inset 0 0 5px rgba(0,0,0,0.05);
            margin: 10px 10px 0 10px;
            pointer-events: auto; /* Ensure clicks work properly */
        }

        /* Chat suggestions container */
        .chat-suggestions-container {
            padding: 10px 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #e9ecef;
            animation: fadeIn 0.3s ease;
        }
        
        .chat-suggestions-title {
            font-size: 0.85rem;
            color: #6c757d;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .chat-suggestions {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
            align-items: flex-start;
        }
        
        .suggestion-chip {
            display: inline-flex;
            align-items: center;
            background-color: #f0f2f5;
            border: 1px solid #dee2e6;
            border-radius: 16px;
            padding: 5px 12px;
            font-size: 0.9rem;
            color: #495057;
            cursor: pointer;
            transition: all 0.2s ease;
            /* Remove max-width restriction to prevent truncation */
            /* Allow text to wrap if needed */
            white-space: normal;
            word-break: break-word;
            /* Add a small height limit with wrapping for very long suggestions */
            max-height: 60px;
            overflow-y: auto;
        }
        
        .suggestion-chip:hover {
            background-color: #e2e6ea;
            border-color: #ced4da;
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .suggestion-chip:active {
            transform: translateY(0);
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Chat input container */
        .chat-input-container {
            flex: 0 0 auto;
            background-color: white;
            border-top: 1px solid var(--light-blue, #d0d7de);
            padding: 10px 15px;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
            margin: 0;
        }
        
        /* Message styles */
        
        .message-time {
            font-size: 0.7rem;
            color: #888;
            margin: 4px 10px;
            flex-basis: 100%;
            text-align: right;
        }
        
        .message.user .message-time {
            text-align: right;
        }
        
        .message.assistant .message-time {
            text-align: left;
        }
        
        .message-loading {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .dot {
            width: 8px;
            height: 8px;
            background-color: #ccc;
            border-radius: 50%;
            margin: 0 3px;
            animation: dot-pulse 1.5s infinite ease-in-out;
        }
        
        .dot:nth-child(2) {
            animation-delay: 0.5s;
        }
        
        .dot:nth-child(3) {
            animation-delay: 1s;
        }
        
        @@keyframes dot-pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 0.5;
            }
            50% {
                transform: scale(1.3);
                opacity: 1;
            }
        }
        
        .message {
            margin-bottom: 20px;
            display: flex;
            width: 100%;
            flex-wrap: wrap;
            gap: 6px;
        }

        .message.user {
            flex-direction: row-reverse;
            justify-content: flex-start;
        }

        .message.assistant {
            justify-content: flex-start;
        }

        .message-content {
            max-width: 75%;
            padding: 12px 18px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .user .message-content {
            background-color: var(--primary-blue);
            color: white;
            border-bottom-right-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .assistant .message-content {
            background-color: var(--pale-blue);
            color: var(--dark-blue);
            border-bottom-left-radius: 4px;
            border: 1px solid var(--light-blue);
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }
        
        .message-time {
            padding: 0 10px;
            margin: 2px 5px;
            font-size: 0.7rem;
            color: #888;
            align-self: center;
        }

        .d-none {
            display: none !important;
        }
        
        pre {
            background-color: #f0f0f0;
            border-radius: 4px;
            padding: 8px;
            margin: 8px 0;
            overflow-x: auto;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
        }
        
        code {
            background-color: #f0f0f0;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
        }
        
        .assistant .message-content pre,
        .assistant .message-content code {
            background-color: rgba(32, 64, 102, 0.1);
            border: 1px solid rgba(32, 64, 102, 0.2);
        }
        
        .user .message-content pre,
        .user .message-content code {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .chat-input-container .form-control {
            border-color: var(--light-blue);
            transition: all 0.2s ease;
        }
        
        .chat-input-container .form-control:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 0.2rem rgba(32, 64, 102, 0.25);
        }
        
        .chat-input-container .btn-primary {
            background-color: var(--primary-blue);
            border-color: var(--primary-blue);
            transition: all 0.2s ease;
        }
        
        .chat-input-container .btn-primary:hover {
            background-color: var(--dark-blue);
            border-color: var(--dark-blue);
        }
        
        /* Send button styling */
        #sendMessageBtn {
            min-width: 110px;
            transition: all 0.3s ease;
        }
        
        #sendMessageBtn:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }
        
        /* Image thumbnail styles */
        .image-thumbnail-container, .tool-image-container {
            position: relative;
            display: inline-block;
            margin-top: 8px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            cursor: pointer;
            clear: both;
            width: 100%;
            max-width: 180px;
        }
        
        .message-media, .tool-result-container {
            width: 100%;
            clear: both;
            display: block;
            flex-basis: 100%;
            margin-top: 8px;
        }
        
        .image-thumbnail, .tool-result-thumbnail {
            display: block;
            max-width: 180px;
            max-height: 180px;
            border-radius: 6px;
            transition: transform 0.2s ease;
        }
        
        .image-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.4);
            opacity: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: opacity 0.2s ease;
        }
        
        .image-thumbnail-container:hover .image-overlay,
        .tool-image-container:hover .image-overlay {
            opacity: 1;
        }
        
        .image-thumbnail-container:hover .image-thumbnail,
        .tool-image-container:hover .tool-result-thumbnail {
            transform: scale(1.05);
        }
        
        .image-expand-btn {
            padding: 6px 10px;
            border-radius: 50%;
            background-color: rgba(255,255,255,0.9);
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        /* Tool result container styles */
        .tool-result-container {
            border: 1px solid var(--light-blue);
            border-radius: 6px;
            overflow: hidden;
        }
        
        .tool-result-header {
            background-color: #f8f9fa;
            color: var(--dark-blue);
            font-size: 0.85rem;
            padding: 6px 10px;
            font-weight: 500;
            border-bottom: 1px solid var(--light-blue);
        }
        
        /* Image viewer modal */
        .image-viewer-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 9999;
            background-color: rgba(0,0,0,0.9);
            justify-content: center;
            align-items: center;
        }
        
        .image-viewer-container {
            position: relative;
            max-width: 90%;
            max-height: 90%;
        }
        
        .image-viewer-img {
            max-width: 100%;
            max-height: 90vh;
            box-shadow: 0 5px 15px rgba(0,0,0,0.5);
        }
        
        .image-viewer-close {
            position: absolute;
            top: -40px;
            right: -40px;
            color: white;
            font-size: 30px;
            cursor: pointer;
            background: none;
            border: none;
            opacity: 0.8;
            transition: opacity 0.2s;
        }
        
        .image-viewer-close:hover {
            opacity: 1;
        }
    </style>
}


@section Scripts {
    <script>
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendMessageBtn = document.getElementById('sendMessageBtn');
        const clearChatBtn = document.getElementById('clearChatBtn');
        const loadingIndicator = document.getElementById('loadingIndicator');
        // getMcpToolsBtn removed - now in layout
        const mcpToolsContainer = document.getElementById('mcpToolsContainer');
        const mcpToolsList = document.getElementById('mcpToolsList');

        let messages = [];
        let currentServerName = '';

        document.addEventListener('DOMContentLoaded', () => {
            loadingIndicator.classList.add('d-none');
            messageInput.focus();
            fetchMessages();
            fetchSuggestions();
            initImageViewer();
            fetchMcpServers();
            
            // Add server select change event listener
            const serverSelect = document.getElementById('serverSelect');
            serverSelect.addEventListener('change', () => {
                currentServerName = serverSelect.value;
                console.log("Server changed to:", currentServerName);
            });
            
            sendMessageBtn.addEventListener('click', sendMessage);
            messageInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            clearChatBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation(); // Ensure event doesn't propagate to parent elements
                if (confirm('Are you sure you want to clear the chat history?')) {
                    clearChat();
                }
            });
            
            // Initialize token refresh monitoring
            startTokenRefreshMonitoring();
            
            // getMcpToolsBtn event listener removed - now handled in _Layout.cshtml
        });
        
        function fetchMcpServers() {
            console.log('Fetching MCP servers...');
            // Check if we already have server options from the model
            const serverSelect = document.getElementById('serverSelect');
            if (serverSelect.options.length > 0) {
                console.log(`Already have ${serverSelect.options.length} server options from the model`);
                // Store the first server as current
                if (serverSelect.options.length > 0) {
                    currentServerName = serverSelect.options[0].value;
                    console.log(`Set current server to: ${currentServerName}`);
                }
                return; // Already have options from model, no need to fetch
            }
            
            fetch('@Url.Action("GetMcpServers", "Chat")')
                .then(response => {
                    console.log('Server response status:', response.status);
                    if (!response.ok) {
                        console.error('Server response not OK:', response.status, response.statusText);
                        throw new Error('Failed to fetch MCP servers');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Received MCP servers data:', data);
                    
                    // Only clear if we're actually populating with new data
                    if (Array.isArray(data) && data.length > 0) {
                        serverSelect.innerHTML = '';
                        console.log(`Adding ${data.length} server options`);
                        // Populate server options
                        data.forEach((server, index) => {
                            console.log(`Adding server option: ${server}`);
                            const option = document.createElement('option');
                            option.value = server;
                            option.textContent = server;
                            if (index === 0) {
                                option.selected = true;
                                currentServerName = server;
                            }
                            serverSelect.appendChild(option);
                        });
                        
                        // Update current server to the first one in the list
                        currentServerName = data[0];
                        console.log("Selected MCP server:", currentServerName);
                        
                        // Enable send button if a server is available
                        document.getElementById('sendMessageBtn').disabled = false;
                    } else {
                        console.warn('No MCP servers returned from API');
                        // Add a default "No servers available" option
                        const option = document.createElement('option');
                        option.value = "";
                        option.textContent = "No MCP servers available";
                        option.disabled = true;
                        option.selected = true;
                        serverSelect.appendChild(option);
                        document.getElementById('sendMessageBtn').disabled = true;
                        
                        // Disable send button if no servers available
                        document.getElementById('sendMessageBtn').disabled = true;
                    }
                })
                .catch(error => {
                    console.error('Error fetching MCP servers:', error);
                    // Show error option
                    const serverSelect = document.getElementById('serverSelect');
                    serverSelect.innerHTML = '';
                    
                    const option = document.createElement('option');
                    option.textContent = "Error loading servers";
                    option.disabled = true;
                    serverSelect.appendChild(option);
                    
                    // Disable send button on error
                    document.getElementById('sendMessageBtn').disabled = true;
                });
        }

        function fetchMcpTools() {
            mcpToolsContainer.classList.remove('d-none');
            mcpToolsList.innerHTML = '<li class="list-group-item">Loading...</li>';
            
            // Get the selected server name
            const serverName = currentServerName || document.getElementById('serverSelect').value;
            
            fetch(`@Url.Action("GetMcpTools", "Chat")?serverName=${encodeURIComponent(serverName)}`)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch MCP tools');
                    return response.json();
                })
                .then(data => {
                    if (Array.isArray(data) && data.length > 0) {
                        mcpToolsList.innerHTML = '';
                        data.forEach(tool => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item';
                            li.textContent = tool;
                            mcpToolsList.appendChild(li);
                        });
                    } else {
                        mcpToolsList.innerHTML = '<li class="list-group-item">No tools available.</li>';
                    }
                })
                .catch(error => {
                    mcpToolsList.innerHTML = `<li class="list-group-item text-danger">Error: ${error.message}</li>`;
                });
        }

        function fetchMessages() {
            loadingIndicator.classList.add('d-none');
            
            fetch('@Url.Action("GetMessages", "Chat")')
                .then(response => response.json())
                .then(data => {
                    messages = data.filter(msg => !msg.isProcessing);
                    renderMessages();
                })
                .catch(error => console.error('Error fetching messages:', error));
        }

        function sendMessage() {
            const content = messageInput.value.trim();
            if (!content) return;

            messageInput.value = '';
            loadingIndicator.classList.remove('d-none');
            
            // Disable the send button and show progress indicator
            toggleSendButtonLoading(true);
            
            // Get the selected server name
            const serverName = currentServerName || document.getElementById('serverSelect').value;
            
            const userMessage = {
                role: 0,
                content: content,
                timestamp: new Date().toISOString()
            };
            messages.push(userMessage);
            renderMessages();
            
            const pendingMessage = {
                role: 1,
                content: "",
                isProcessing: true,
                timestamp: new Date().toISOString()
            };
            messages.push(pendingMessage);
            renderMessages();
            fetch('/mcp/chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'include',
                body: `message=${encodeURIComponent(content)}&serverName=${encodeURIComponent(serverName)}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                loadingIndicator.classList.add('d-none');
                fetchMessages();
                // Re-enable the send button
                toggleSendButtonLoading(false);
                // Refresh suggestions after sending a message
                setTimeout(fetchSuggestions, 1000);
            })
            .catch(error => {
                console.error('Error sending message:', error);
                messages.pop();
                messages.push({
                    role: 1,
                    content: "Sorry, I encountered an error processing your request. Please try again.",
                    timestamp: new Date().toISOString()
                });
                renderMessages();
                loadingIndicator.classList.add('d-none');
                // Re-enable the send button
                toggleSendButtonLoading(false);
                // Hide suggestions on error
                hideSuggestionsContainer();
            });
        }

        function clearChat() {
            console.log('Clearing chat history...');
            fetch('@Url.Action("ClearChat", "Chat")', {
                method: 'POST'
            })
            .then(() => {
                console.log('Chat history cleared successfully');
                messages = [];
                renderMessages();
            })
            .catch(error => console.error('Error clearing chat:', error));
        }

        // Scroll to the bottom of the chat container
        function scrollToLatestMessage() {
            // Use setTimeout to ensure this runs after the DOM has been updated
            setTimeout(() => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 0);
        }
        
        function renderMessages() {
            chatMessages.innerHTML = '';
            
            if (messages.length === 0) {
                chatMessages.innerHTML = `
                    <div class="text-center my-5">
                        <div class="mb-4">
                            <i class="fas fa-robot fa-4x" style="color: var(--primary-blue);"></i>
                        </div>
                        <h4 class="mb-3" style="color: var(--dark-blue);">Welcome</h4>
                        <p class="text-muted mb-4">Ask me anything to get started!</p>
                    </div>
                `;
                return;
            }

            messages.forEach(message => {
                const role = message.role === 0 ? 'user' : 'assistant';
                
                const messageElement = document.createElement('div');
                messageElement.className = `message ${role}`;
                
                const time = new Date(message.timestamp).toLocaleTimeString([], { 
                    hour: '2-digit', 
                    minute: '2-digit'
                });
                
                if (message.isProcessing) {
                    messageElement.innerHTML = `
                        <div class="message-content">
                            <div class="message-loading">
                                <div class="dot"></div>
                                <div class="dot"></div>
                                <div class="dot"></div>
                            </div>
                        </div>
                        <div class="message-time">${time}</div>
                    `;
                } else {
                    const formattedContent = formatMessage(message.content);
                    
                    messageElement.innerHTML = `
                        <div class="message-content">${formattedContent}</div>
                        <div class="message-time">${time}</div>
                    `;
                    // Handle media attachments (images)
                    if (message.mediaUrl && message.mediaType && message.mediaType.startsWith('image/')) {
                        const imgContainer = document.createElement('div');
                        imgContainer.className = 'message-media mt-2';
                        
                        // Create thumbnail wrapper with zoom functionality
                        imgContainer.innerHTML = `
                            <div class="image-thumbnail-container">
                                <img src="${message.mediaUrl}" alt="AI Generated Image" class="image-thumbnail">
                                <div class="image-overlay">
                                    <button class="btn btn-sm btn-light image-expand-btn" aria-label="View full image">
                                        <i class="fas fa-search-plus"></i>
                                    </button>
                                </div>
                            </div>
                        `;
                        
                        messageElement.appendChild(imgContainer);
                        
                        // Add click listener to open image in modal/lightbox
                        const expandBtn = imgContainer.querySelector('.image-expand-btn');
                        expandBtn.addEventListener('click', () => {
                            openImageViewer(message.mediaUrl);
                        });
                        
                        // Also allow clicking on the image itself
                        const thumbnail = imgContainer.querySelector('.image-thumbnail');
                        thumbnail.addEventListener('click', () => {
                            openImageViewer(message.mediaUrl);
                        });
                    }
                    
                    // Handle tool execution results with images
                    if (message.toolResults && Array.isArray(message.toolResults)) {
                        message.toolResults.forEach(result => {
                            if (result.imageUrl) {
                                const toolResultContainer = document.createElement('div');
                                toolResultContainer.className = 'tool-result-container mt-2';
                                
                                toolResultContainer.innerHTML = `
                                    <div class="tool-result-header">
                                        <i class="fas fa-tools me-2"></i>
                                        <span>Tool Result</span>
                                    </div>
                                    <div class="tool-image-container">
                                        <img src="${result.imageUrl}" alt="Tool Result" class="tool-result-thumbnail">
                                        <div class="image-overlay">
                                            <button class="btn btn-sm btn-light image-expand-btn" aria-label="View full image">
                                                <i class="fas fa-search-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                `;
                                
                                messageElement.appendChild(toolResultContainer);
                                
                                // Add click listener for tool result image
                                const expandBtn = toolResultContainer.querySelector('.image-expand-btn');
                                expandBtn.addEventListener('click', () => {
                                    openImageViewer(result.imageUrl);
                                });
                                
                                const thumbnail = toolResultContainer.querySelector('.tool-result-thumbnail');
                                thumbnail.addEventListener('click', () => {
                                    openImageViewer(result.imageUrl);
                                });
                            }
                        });
                    }
                }
                
                chatMessages.appendChild(messageElement);
            });
            
            // Scroll to the latest message
            scrollToLatestMessage();
        }
        
        function formatMessage(content) {
            if (!content) return '';
            let formatted = content.replace(/```([^`]+)```/g, '<pre><code>$1</code></pre>');
            formatted = formatted.replace(/`([^`]+)`/g, '<code>$1</code>');
            formatted = formatted.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
            formatted = formatted.replace(/\*([^*]+)\*/g, '<em>$1</em>');
            formatted = formatted.replace(/\n/g, '<br>');
            return formatted;
        }
        
        // Image viewer functionality
        function initImageViewer() {
            const modal = document.getElementById('imageViewerModal');
            const modalImg = document.getElementById('imageViewerImg');
            const closeBtn = document.getElementById('imageViewerClose');
            
            // Close modal when clicking close button
            closeBtn.addEventListener('click', () => {
                modal.style.display = 'none';
            });
            
            // Close modal when clicking outside the image
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
            
            // Close modal with escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && modal.style.display === 'flex') {
                    modal.style.display = 'none';
                }
            });
        }
        
        // Function to open image viewer with the given image URL
        function openImageViewer(imageUrl) {
            const modal = document.getElementById('imageViewerModal');
            const modalImg = document.getElementById('imageViewerImg');
            
            modalImg.src = imageUrl;
            modal.style.display = 'flex';
        }
        
        // Toggle send button loading state
        function toggleSendButtonLoading(isLoading) {
            const sendBtn = document.getElementById('sendMessageBtn');
            const sendBtnText = document.getElementById('sendBtnText');
            const sendBtnLoading = document.getElementById('sendBtnLoading');
            
            if (isLoading) {
                sendBtn.disabled = true;
                sendBtnText.classList.add('d-none');
                sendBtnLoading.classList.remove('d-none');
            } else {
                sendBtn.disabled = false;
                sendBtnText.classList.remove('d-none');
                sendBtnLoading.classList.add('d-none');
            }
        }
        
        // Token refresh functionality
        let tokenRefreshIntervalId = null;
        // The interval before token expiry when we should refresh it (5 minutes)
        const TOKEN_REFRESH_LEAD_TIME = 5 * 60 * 1000; 
        // Check token every 3 minutes - reasonable for production use
        const TOKEN_CHECK_INTERVAL = 3 * 60 * 1000;
        
        function startTokenRefreshMonitoring() {
            console.log("Token refresh monitoring started");
            
            // Clear any existing interval to prevent duplicates
            if (tokenRefreshIntervalId) {
                clearInterval(tokenRefreshIntervalId);
                tokenRefreshIntervalId = null;
            }
            
            // Initial check immediately
            checkAndRefreshToken();
            
            // Start periodic checks
            const intervalMinutes = TOKEN_CHECK_INTERVAL / (60 * 1000);
            console.log(`Token refresh scheduler: Checking every ${intervalMinutes} minutes`);
            tokenRefreshIntervalId = setInterval(checkAndRefreshToken, TOKEN_CHECK_INTERVAL);
        }
        
        function checkAndRefreshToken() {
            const now = new Date();
            
            fetch('/mcp/account/refresh-token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'include' // Important to include cookies
            })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        console.warn('Session expired - redirecting to login');
                        // Redirect to login or show session expired modal
                        window.location.href = '/mcp/account/logout';
                        return null;
                    }
                    throw new Error(`Token refresh failed with status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data) {
                    // Only log on successful refresh
                    console.log(`Token refreshed at ${now.toLocaleTimeString()}, expires: ${data.expiresAtUtc}`);
                }
            })
            .catch(error => {
                console.error('Error refreshing token:', error);
            });
        }
        
        // Suggestion functions
        function fetchSuggestions() {
            fetch('@Url.Action("GetSuggestions", "Chat")')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch suggestions');
                    }
                    return response.json();
                })
                .then(suggestions => {
                    if (Array.isArray(suggestions) && suggestions.length > 0) {
                        displaySuggestions(suggestions);
                    } else {
                        hideSuggestionsContainer();
                    }
                })
                .catch(error => {
                    console.error('Error fetching suggestions:', error);
                    hideSuggestionsContainer();
                });
        }
        
        function displaySuggestions(suggestions) {
            const suggestionsList = document.getElementById('suggestionsList');
            suggestionsList.innerHTML = '';
            
            suggestions.forEach(suggestion => {
                const chip = document.createElement('div');
                chip.className = 'suggestion-chip';
                chip.textContent = suggestion.text;
                chip.dataset.id = suggestion.id;
                chip.dataset.text = suggestion.text;
                
                chip.addEventListener('click', function() {
                    // Fill the input with the suggestion text
                    document.getElementById('messageInput').value = this.dataset.text;
                    // Focus on the input
                    document.getElementById('messageInput').focus();
                    // Hide the suggestions container after selection
                    hideSuggestionsContainer();
                    // Optionally, send the message immediately
                    // sendMessage();
                });
                
                suggestionsList.appendChild(chip);
            });
            
            // Show the suggestions container
            document.getElementById('suggestionsContainer').style.display = 'block';
        }
        
        function hideSuggestionsContainer() {
            document.getElementById('suggestionsContainer').style.display = 'none';
        }
        
        function clearSuggestions() {
            const suggestionsList = document.getElementById('suggestionsList');
            if (suggestionsList) {
                suggestionsList.innerHTML = '';
            }
        }
        
        // Start token refresh monitoring when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Add token refresh monitoring to the existing event listener
            startTokenRefreshMonitoring();
        });
    </script>
}

<!-- Image viewer modal -->
<div id="imageViewerModal" class="image-viewer-modal">
    <div class="image-viewer-container">
        <button id="imageViewerClose" class="image-viewer-close btn btn-link text-white">
            <i class="fas fa-times"></i>
        </button>
        <img id="imageViewerImg" class="image-viewer-img" alt="Full size image" />
    </div>
</div>