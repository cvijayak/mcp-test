@model CMS.Mcp.Client.Contracts.Models.TokenInfoViewModel
@{
    ViewData["Title"] = "MCP Chat";
}

<div class="container-fluid p-0">
    <div class="row g-0">
        <div class="col-md-3 col-lg-2 bg-light border-end chat-sidebar">
            <div class="p-3 border-bottom">
                <h5 class="mb-0 d-flex align-items-center">
                    <i class="fas fa-robot me-2"></i> Chat
                </h5>
            </div>
            <div class="p-3">
                <div class="d-grid gap-2">
                    <button id="clearChatBtn" class="btn btn-outline-danger">
                        <i class="fas fa-trash me-2"></i> Clear Conversation
                    </button>
                    <button id="getMcpToolsBtn" class="btn btn-outline-primary mt-2">
                        <i class="fas fa-tools me-2"></i> MCP Tools
                    </button>
                </div>
                
                <hr>
            </div>
        </div>
        
        <div class="col-md-9 col-lg-10 chat-main">
            <div class="chat-header d-flex justify-content-between align-items-center p-3 border-bottom">
                <h4 class="mb-0"></h4>
                <div id="mcpToolsContainer" class="d-none">
                    <h5>MCP Tools</h5>
                    <ul id="mcpToolsList" class="list-group"></ul>
                </div>
            </div>
            
            <div id="chatContainer" class="chat-container p-3">
                <div id="chatMessages" class="chat-messages"></div>
                <div id="loadingIndicator" class="d-none text-center my-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            
            <div class="chat-input-container p-3 border-top">
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." />
                    <button id="sendMessageBtn" class="btn btn-primary px-4">
                        <i class="fas fa-paper-plane me-2"></i> Send
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        body {
            overflow: hidden;
        }
        
        .chat-sidebar {
            height: calc(100vh - 66px);
            background-color: var(--pale-blue);
            border-right: 1px solid var(--light-blue);
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
        }
        

        
        .chat-main {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 66px);
        }
        
        .chat-header {
            background-color: var(--white);
            border-bottom: 1px solid var(--light-blue);
        }
        
        .chat-container {
            flex: 1;
            overflow-y: auto;
            border: 1px solid var(--light-blue);
            border-radius: 8px;
            padding: 15px;
            background-color: white;
            box-shadow: inset 0 0 5px rgba(0,0,0,0.05);
            margin: 10px;
        }

        .message {
            margin-bottom: 20px;
            display: flex;
            width: 100%;
        }

        .message.user {
            flex-direction: row-reverse;
        }

        .message-content {
            max-width: 75%;
            padding: 12px 18px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .user .message-content {
            background-color: var(--primary-blue);
            color: white;
            border-bottom-right-radius: 4px;
            margin-left: auto;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .assistant .message-content {
            background-color: var(--pale-blue);
            color: var(--dark-blue);
            border-bottom-left-radius: 4px;
            margin-right: auto;
            border: 1px solid var(--light-blue);
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }

        .message-time {
            font-size: 0.7rem;
            color: #6c757d;
            margin-top: 4px;
            text-align: right;
        }
        
        .user .message-time {
            text-align: right;
            padding-right: 8px;
        }
        
        .assistant .message-time {
            text-align: left;
            padding-left: 8px;
        }

        .assistant .message-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            width: 100%;
        }

        .user .message-container {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            width: 100%;
        }

        .message-loading {
            display: flex;
            align-items: center;
        }

        .message-loading .dot {
            width: 8px;
            height: 8px;
            background: var(--primary-blue);
            border-radius: 50%;
            margin: 0 2px;
            animation: pulse 1.5s infinite;
        }

        .message-loading .dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .message-loading .dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @@keyframes pulse {
            0%, 100% { transform: scale(0.8); opacity: 0.5; }
            50% { transform: scale(1.2); opacity: 1; }
        }
        
        .d-none {
            display: none !important;
        }
        
        pre {
            background-color: #f0f0f0;
            border-radius: 4px;
            padding: 8px;
            margin: 8px 0;
            overflow-x: auto;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
        }
        
        code {
            background-color: #f0f0f0;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
        }
        
        .assistant .message-content pre,
        .assistant .message-content code {
            background-color: rgba(32, 64, 102, 0.1);
            border: 1px solid rgba(32, 64, 102, 0.2);
        }
        
        .user .message-content pre,
        .user .message-content code {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .chat-input-container {
            background-color: white;
            border-top: 1px solid var(--light-blue);
            padding: 15px;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
        }
        
        .chat-input-container .form-control {
            border-color: var(--light-blue);
            transition: all 0.2s ease;
        }
        
        .chat-input-container .form-control:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 0.2rem rgba(32, 64, 102, 0.25);
        }
        
        .chat-input-container .btn-primary {
            background-color: var(--primary-blue);
            border-color: var(--primary-blue);
            transition: all 0.2s ease;
        }
        
        .chat-input-container .btn-primary:hover {
            background-color: var(--dark-blue);
            border-color: var(--dark-blue);
        }
    </style>
}

@section Scripts {
    <script>
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendMessageBtn = document.getElementById('sendMessageBtn');
        const clearChatBtn = document.getElementById('clearChatBtn');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const getMcpToolsBtn = document.getElementById('getMcpToolsBtn');
        const mcpToolsContainer = document.getElementById('mcpToolsContainer');
        const mcpToolsList = document.getElementById('mcpToolsList');

        let messages = [];

        document.addEventListener('DOMContentLoaded', () => {
            loadingIndicator.classList.add('d-none');
            messageInput.focus();
            fetchMessages();
            
            sendMessageBtn.addEventListener('click', sendMessage);
            messageInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            clearChatBtn.addEventListener('click', (e) => {
                e.preventDefault();
                if (confirm('Are you sure you want to clear the chat history?')) {
                    clearChat();
                }
            });
            getMcpToolsBtn.addEventListener('click', () => {
                window.location.href = '@Url.Action("GetMcpTools", "Chat")';
            });
        });

        function fetchMcpTools() {
            mcpToolsContainer.classList.remove('d-none');
            mcpToolsList.innerHTML = '<li class="list-group-item">Loading...</li>';
            fetch('@Url.Action("GetMcpTools", "Chat")')
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch MCP tools');
                    return response.json();
                })
                .then(data => {
                    if (Array.isArray(data) && data.length > 0) {
                        mcpToolsList.innerHTML = '';
                        data.forEach(tool => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item';
                            li.textContent = tool;
                            mcpToolsList.appendChild(li);
                        });
                    } else {
                        mcpToolsList.innerHTML = '<li class="list-group-item">No tools available.</li>';
                    }
                })
                .catch(error => {
                    mcpToolsList.innerHTML = `<li class="list-group-item text-danger">Error: ${error.message}</li>`;
                });
        }

        function fetchMessages() {
            loadingIndicator.classList.add('d-none');
            
            fetch('@Url.Action("GetMessages", "Chat")')
                .then(response => response.json())
                .then(data => {
                    messages = data.filter(msg => !msg.isProcessing);
                    renderMessages();
                })
                .catch(error => console.error('Error fetching messages:', error));
        }

        function sendMessage() {
            const content = messageInput.value.trim();
            if (!content) return;

            messageInput.value = '';
            loadingIndicator.classList.remove('d-none');
            
            const userMessage = {
                role: 0,
                content: content,
                timestamp: new Date().toISOString()
            };
            messages.push(userMessage);
            renderMessages();
            
            const pendingMessage = {
                role: 1,
                content: "",
                isProcessing: true,
                timestamp: new Date().toISOString()
            };
            messages.push(pendingMessage);
            renderMessages();
            fetch('/mcp/chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'include',
                body: `message=${encodeURIComponent(content)}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                loadingIndicator.classList.add('d-none');
                fetchMessages();
            })
            .catch(error => {
                console.error('Error sending message:', error);
                messages.pop();
                messages.push({
                    role: 1,
                    content: "Sorry, I encountered an error processing your request. Please try again.",
                    timestamp: new Date().toISOString()
                });
                renderMessages();
                loadingIndicator.classList.add('d-none');
            });
        }

        function clearChat() {
            fetch('@Url.Action("ClearChat", "Chat")', {
                method: 'POST'
            })
            .then(() => {
                messages = [];
                renderMessages();
            })
            .catch(error => console.error('Error clearing chat:', error));
        }

        function renderMessages() {
            chatMessages.innerHTML = '';
            
            if (messages.length === 0) {
                chatMessages.innerHTML = `
                    <div class="text-center my-5">
                        <div class="mb-4">
                            <i class="fas fa-robot fa-4x" style="color: var(--primary-blue);"></i>
                        </div>
                        <h4 class="mb-3" style="color: var(--dark-blue);">Welcome</h4>
                        <p class="text-muted mb-4">Ask me anything to get started!</p>
                    </div>
                `;
                return;
            }

            messages.forEach(message => {
                const role = message.role === 0 ? 'user' : 'assistant';
                
                const messageElement = document.createElement('div');
                messageElement.className = `message ${role}`;
                
                const time = new Date(message.timestamp).toLocaleTimeString([], { 
                    hour: '2-digit', 
                    minute: '2-digit'
                });
                
                if (message.isProcessing) {
                    messageElement.innerHTML = `
                        <div class="message-container">
                            <div class="message-content">
                                <div class="message-loading">
                                    <div class="dot"></div>
                                    <div class="dot"></div>
                                    <div class="dot"></div>
                                </div>
                            </div>
                            <div class="message-time">${time}</div>
                        </div>
                    `;
                } else {
                    const formattedContent = formatMessage(message.content);
                    
                    messageElement.innerHTML = `
                        <div class="message-container">
                            <div class="message-content">${formattedContent}</div>
                            <div class="message-time">${time}</div>
                        </div>
                    `;
                    if (message.mediaUrl && message.mediaType && message.mediaType.startsWith('image/')) {
                        const imgContainer = document.createElement('div');
                        imgContainer.className = 'message-media mt-2';
                        imgContainer.innerHTML = `<img src="${message.mediaUrl}" alt="AI Generated Image" style="max-width: 300px; border-radius: 8px;">`;
                        messageElement.querySelector('.message-container').appendChild(imgContainer);
                    }
                }
                
                chatMessages.appendChild(messageElement);
            });
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function formatMessage(content) {
            if (!content) return '';
            
            let formatted = content.replace(/```([^`]+)```/g, '<pre><code>$1</code></pre>');
            formatted = formatted.replace(/`([^`]+)`/g, '<code>$1</code>');
            formatted = formatted.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
            formatted = formatted.replace(/\*([^*]+)\*/g, '<em>$1</em>');
            formatted = formatted.replace(/\n/g, '<br>');
            
            return formatted;
        }
    </script>
}
