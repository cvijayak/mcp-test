@model IEnumerable<McpToolViewModel>
@{
    ViewData["Title"] = "MCP Tools";
}

<style>
    /* MCP Tools styling to match chat window */
    .mcp-tools-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }
    
    .tools-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
    }
    
    .tools-content {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
    }
    
    .tools-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .tool-item {
        background-color: #ffffff;
        transition: all 0.2s ease;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        overflow: hidden;
    }
    
    .tool-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        border-color: #c8d6e5;
    }
    
    .param-collapse-toggle {
        font-size: 0.85rem;
        padding: 5px 12px;
    }
    
    .tool-parameters {
        margin-top: 10px;
    }
    
    .parameter-field {
        padding: 8px;
        border-radius: 5px;
        background-color: rgba(0, 0, 0, 0.02);
        margin-bottom: 10px;
    }
</style>
<div class="mcp-tools-container">
    <div class="tools-header d-flex justify-content-between align-items-center p-3 border-bottom">
        <div class="d-flex align-items-center">
            <div class="app-logo d-flex align-items-center me-3">
                <i class="fas fa-tools fa-lg me-2 text-primary"></i>
                <h5 class="mb-0 fw-bold">MCP Tools</h5>
            </div>
        </div>
        <div class="d-flex align-items-center">
            <div class="d-flex align-items-center me-3">
                <label for="serverSelect" class="me-2 mb-0">Server:</label>
                <select id="serverSelect" class="form-select form-select-sm" style="width: 200px;">
                    @foreach (var server in ViewBag.ServerOptions)
                    {
                        if (server == ViewBag.SelectedServer)
                        {
                            <option value="@server" selected="selected">@server</option>
                        }
                        else
                        {
                            <option value="@server">@server</option>
                        }
                    }
                </select>
            </div>
            <a href="@Url.Action("Index", "Chat")" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-2"></i> Back to Chat
            </a>
        </div>
    </div>
    
    <div class="tools-content p-3">
        @if (TempData["ToolResult"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show mb-3" role="alert">
                <strong>Tool Result:</strong> @TempData["ToolResult"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        
        @if (Model != null && Model.Any())
        {
            <div class="tools-list">
                    @foreach (var tool in Model)
                    {
                        <div class="list-group-item list-group-item-action tool-item mb-3 rounded">
                            <div class="d-flex w-100 justify-content-between align-items-center">
                                <div>
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="fas fa-cogs fa-2x text-info me-3"></i>
                                        <h5 class="card-title mb-0">@tool.Title</h5>
                                    </div>
                                    <h6 class="text-secondary mb-1">@tool.Name</h6>
                                    <p class="tool-description mb-3 text-secondary">@tool.Description</p>
                                </div>
                                @if (tool.Parameters != null && tool.Parameters.Length > 0)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-primary param-collapse-toggle rounded-pill" 
                                            data-bs-toggle="collapse" data-bs-target="#params-@tool.Name">
                                        <i class="fas fa-sliders-h me-1"></i> Parameters (@tool.Parameters.Length) <i class="fas fa-chevron-down ms-1 toggle-icon"></i>
                                    </button>
                                }
                            </div>
                            <form class="mt-2 tool-form">
                                <input type="hidden" name="toolName" value="@tool.Name" />
                                <input type="hidden" name="serverName" value="@ViewBag.SelectedServer" />
                                
                                @if (tool.Parameters != null && tool.Parameters.Length > 0)
                                {
                                    <div class="collapse tool-parameters mb-3" id="params-@tool.Name">
                                        <div class="card card-body bg-light border-0 rounded-3">
                                            @foreach (var param in tool.Parameters)
                                            {
                                                <div class="mb-2 parameter-field">
                                                    <label class="form-label d-flex justify-content-between">
                                                        <span>@param.Name</span>
                                                        <small class="text-muted parameter-type">(@param.Type)</small>
                                                    </label>
                                                    @if (!string.IsNullOrEmpty(param.Description))
                                                    {
                                                        <p class="parameter-desc form-text text-muted small mb-1">@param.Description</p>
                                                    }
                                                    
                                                    @if (param.Type.Equals("Boolean", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        <div class="form-check form-switch">
                                                            <input class="form-check-input param-value" type="checkbox" id="param-@(tool.Name)-@param.Name" 
                                                                name="@param.Name" data-param-name="@param.Name" data-param-type="@param.Type">
                                                            <label class="form-check-label" for="param-@(tool.Name)-@param.Name">Enable</label>
                                                        </div>
                                                    }
                                                    else if (param.Type.Equals("Array", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        <textarea class="form-control param-value" rows="3" placeholder="Enter JSON array"
                                                                name="@param.Name" data-param-name="@param.Name" data-param-type="@param.Type"></textarea>
                                                    }
                                                    else if (param.Type.Equals("Object", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        <textarea class="form-control param-value" rows="3" placeholder="Enter JSON object"
                                                                name="@param.Name" data-param-name="@param.Name" data-param-type="@param.Type"></textarea>
                                                    }
                                                    else if (param.Type.Equals("Integer", StringComparison.OrdinalIgnoreCase) || 
                                                            param.Type.Equals("Number", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        <input type="number" class="form-control param-value" 
                                                            placeholder="Enter a number"
                                                            name="@param.Name" data-param-name="@param.Name" data-param-type="@param.Type" />
                                                    }
                                                    else
                                                    {
                                                        <input type="text" class="form-control param-value" 
                                                            placeholder="Enter value"
                                                            name="@param.Name" data-param-name="@param.Name" data-param-type="@param.Type" />
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                <button type="button" class="btn btn-success w-100 execute-btn">
                                    <span class="btn-text"><i class="fas fa-play me-2"></i> Execute</span>
                                    <span class="btn-loading d-none">
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        Processing...
                                    </span>
                                </button>
                            </form>
                        </div>
                    }
                </div>
            }
        else
        {
            <div class="tools-list">
                <div class="text-center py-4">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>No tools available.</strong> Please check your configuration or contact support.
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="toolResultModal" tabindex="-1" aria-labelledby="toolResultModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="toolResultModalLabel">Tool Execution Result</h5>
        <div class="view-options ms-3">
          <div class="btn-group" role="group" aria-label="View options">
            <button type="button" class="btn btn-sm btn-outline-primary active" id="jsonViewBtn">JSON</button>
            <button type="button" class="btn btn-sm btn-outline-primary" id="treeViewBtn">Tree View</button>
            <button type="button" class="btn btn-sm btn-outline-primary" id="tableViewBtn">Table View</button>
          </div>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="jsonView">
          <pre id="toolResultContent" class="bg-light p-3 rounded mb-0"></pre>
        </div>
        <div id="treeView" class="d-none">
          <div id="jsonTree" class="p-3 rounded mb-0 modern-json-tree"></div>
        </div>
        <div id="tableView" class="d-none">
          <div class="table-responsive">
            <table id="jsonTable" class="table table-striped">
              <thead id="jsonTableHead"></thead>
              <tbody id="jsonTableBody"></tbody>
            </table>
          </div>
        </div>
        <div id="imagesContainer" class="mt-3 d-none">
          <h6 class="mb-2">Images</h6>
          <div id="resultImages" class="d-flex flex-wrap gap-2"></div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
// JavaScript code for the MCP Tools page
document.addEventListener('DOMContentLoaded', function() {
    const serverSelect = document.getElementById('serverSelect');
    if (serverSelect) {
        serverSelect.addEventListener('change', function() {
            const selectedServer = this.value;
            window.location.href = '@Url.Action("GetMcpTools", "Chat")' + '?serverName=' + encodeURIComponent(selectedServer);
        });
    }
    
    // No inline result containers, so no clear buttons
    
    document.querySelectorAll('.param-collapse-toggle').forEach(button => {
        button.addEventListener('click', function() {
            const icon = this.querySelector('.toggle-icon');
            icon.classList.toggle('fa-rotate-180');
        });
    });
    document.getElementById('jsonViewBtn').addEventListener('click', function() {
        setActiveView('jsonView');
    });
    
    document.getElementById('treeViewBtn').addEventListener('click', function() {
        setActiveView('treeView');
    });
    
    document.getElementById('tableViewBtn').addEventListener('click', function() {
        setActiveView('tableView');
    });
    
    document.getElementById('treeViewBtn').classList.add('active');
    document.getElementById('jsonViewBtn').classList.remove('active');
    
    document.querySelectorAll('.tool-form').forEach(function(form) {
        const hasParameters = form.querySelector('.tool-parameters') !== null;
        const executeBtn = form.querySelector('.execute-btn');
        
        if (hasParameters) {
            executeBtn.disabled = true;
            
            form.querySelectorAll('.param-value').forEach(function(input) {
                input.addEventListener('input', function() {
                    validateFormParameters(form);
                });
                
                if (input.type === 'checkbox') {
                    input.addEventListener('change', function() {
                        validateFormParameters(form);
                    });
                }
            });
            
            validateFormParameters(form);
        }
        
        // Add click event to the execute button
        executeBtn.addEventListener('click', function() {
            form.dispatchEvent(new Event('submit'));
        });
        
        form.addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent the default form submission
            
            // Instead of using ExecuteToolForm controller action, we'll use ExecuteTool API directly
            const executeBtn = form.querySelector('.execute-btn');
            const btnText = executeBtn.querySelector('.btn-text');
            const btnLoading = executeBtn.querySelector('.btn-loading');
            
            executeBtn.disabled = true;
            btnText.classList.add('d-none');
            btnLoading.classList.remove('d-none');
            
            const toolName = form.querySelector('input[name="toolName"]').value;
            const paramDict = {};
            let hasError = false;
            let hasParams = false;
            form.querySelectorAll('.tool-parameters .param-value').forEach(function(input) {
                const key = input.dataset.paramName;
                const paramType = input.dataset.paramType;
                let value;
                
                if (paramType.toLowerCase() === 'boolean') {
                    value = input.checked;
                    hasParams = true;
                } else if (input.value.trim() !== '') {
                    hasParams = true;
                    if (paramType.toLowerCase() === 'integer' || paramType.toLowerCase() === 'number') {
                        value = parseFloat(input.value);
                    } else if (paramType.toLowerCase() === 'array' || paramType.toLowerCase() === 'object') {
                        try {
                            value = JSON.parse(input.value);
                            input.classList.remove('is-invalid');
                        } catch (e) {
                            input.classList.add('is-invalid');
                            hasError = true;
                            value = input.value;
                        }
                    } else {
                        value = input.value;
                    }
                }
                
                if (key && value !== undefined) {
                    paramDict[key] = value;
                }
            });
            
            form.querySelectorAll('.input-group').forEach(function(row) {
                const key = row.querySelector('.param-key')?.value;
                const valueStr = row.querySelector('.param-value')?.value;
                if (key) {
                    hasParams = true;
                    let parsedValue;
                    try {
                        parsedValue = JSON.parse(valueStr);
                    } catch {
                        if (!isNaN(valueStr) && valueStr.trim() !== "") {
                            parsedValue = Number(valueStr);
                        } else {
                            parsedValue = valueStr;
                        }
                    }
                    paramDict[key] = parsedValue;
                    row.querySelector('.param-value').classList.remove('is-invalid');
                }
            });
            if (hasError) {
                alert("Please fix the invalid JSON in parameters");
                executeBtn.disabled = false;
                btnText.classList.remove('d-none');
                btnLoading.classList.add('d-none');
                return;
            }
            
            // Using ExecuteTool API directly instead of ExecuteToolForm
            const requestData = { 
                toolName: toolName, 
                serverName: form.querySelector('input[name="serverName"]').value, 
                parameters: hasParams ? paramDict : {} 
            };
            
            console.log('Executing tool:', requestData);
            
            fetch('/mcp/chat/ExecuteTool', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            })
            .then(async response => {
                // Check if response is successful
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}, Message: ${response.statusText}`);
                }
                
                const contentType = response.headers.get('content-type');
                let resultText = '';
                let resultJson = null;
                
                if (contentType && contentType.indexOf('application/json') !== -1) {
                    resultJson = await response.json();
                    resultText = JSON.stringify(resultJson, null, 2);
                } else if (contentType && contentType.indexOf('text/html') !== -1) {
                    resultText = "Error: The server returned an HTML page instead of JSON. Please contact support or check the backend controller.";
                } else {
                    resultText = await response.text();
                    try {
                        resultJson = JSON.parse(resultText);
                    } catch (e) {
                    }
                }
                
                // Only update modal content, don't show in the tool result container
                document.getElementById('toolResultContent').textContent = resultText;
                
                if (resultJson) {
                    setupTreeView(resultJson);
                    
                    setupTableView(resultJson);
                    
                    findAndDisplayImages(resultJson);
                }
                
                document.querySelectorAll('.view-options .btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                document.getElementById('treeViewBtn').classList.add('active');
                
                document.getElementById('jsonView').classList.add('d-none');
                document.getElementById('treeView').classList.remove('d-none');
                document.getElementById('tableView').classList.add('d-none');
                
                setTimeout(() => {
                    document.querySelectorAll('.json-tree-key').forEach(keyElement => {
                        const newKeyElement = keyElement.cloneNode(true);
                        keyElement.parentNode.replaceChild(newKeyElement, keyElement);
                        
                        newKeyElement.addEventListener('click', function(e) {
                            e.stopPropagation();
                            
                            const nodeContainer = this.closest('.json-tree-node');
                            if (nodeContainer) {
                                const contentElement = nodeContainer.querySelector('.json-tree-content');
                                if (contentElement) {
                                    contentElement.classList.toggle('collapsed');
                                    this.classList.toggle('collapsed');
                                }
                            }
                        });
                    });
                }, 100);
                
                const modal = new bootstrap.Modal(document.getElementById('toolResultModal'));
                modal.show();
                executeBtn.disabled = false;
                btnText.classList.remove('d-none');
                btnLoading.classList.add('d-none');
            })
            .catch(error => {
                const errorMessage = "Error executing tool: " + error;
                
                // Only update modal content, don't show in the tool result container
                document.getElementById('toolResultContent').textContent = errorMessage;
                document.getElementById('jsonView').classList.remove('d-none');
                document.getElementById('treeView').classList.add('d-none');
                document.getElementById('tableView').classList.add('d-none');
                document.getElementById('imagesContainer').classList.add('d-none');
                document.querySelectorAll('.view-options .btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                document.getElementById('jsonViewBtn').classList.add('active');
                
                const modal = new bootstrap.Modal(document.getElementById('toolResultModal'));
                modal.show();
                console.error(error);
                executeBtn.disabled = false;
                btnText.classList.remove('d-none');
                btnLoading.classList.add('d-none');
            });
        });
    });
});

function setActiveView(viewId) {
    document.getElementById('jsonView').classList.add('d-none');
    document.getElementById('treeView').classList.add('d-none');
    document.getElementById('tableView').classList.add('d-none');
    
    document.getElementById(viewId).classList.remove('d-none');
    document.querySelectorAll('.view-options .btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    let btnId = viewId + 'Btn';
    document.getElementById(btnId).classList.add('active');
}
function setupTreeView(data) {
    const container = document.getElementById('jsonTree');
    container.innerHTML = '';
    
    const controls = document.createElement('div');
    controls.className = 'json-tree-controls';
    
    const expandAllBtn = document.createElement('button');
    expandAllBtn.className = 'json-tree-control-btn';
    expandAllBtn.textContent = 'Expand All';
    expandAllBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        container.querySelectorAll('.json-tree-content').forEach(content => {
            content.classList.remove('collapsed');
        });
        container.querySelectorAll('.json-tree-key').forEach(key => {
            key.classList.remove('collapsed');
        });
    });
    
    const collapseAllBtn = document.createElement('button');
    collapseAllBtn.className = 'json-tree-control-btn';
    collapseAllBtn.textContent = 'Collapse All';
    collapseAllBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        container.querySelectorAll('.json-tree-node > .json-tree-key').forEach(key => {
            const content = key.nextElementSibling;
            if (content && content.classList.contains('json-tree-content')) {
                content.classList.add('collapsed');
                key.classList.add('collapsed');
            }
        });
    });
    
    controls.appendChild(expandAllBtn);
    controls.appendChild(collapseAllBtn);
    container.appendChild(controls);
    
    const rootElement = document.createElement('div');
    rootElement.className = 'json-tree-root';
    container.appendChild(rootElement);
    
    if (Array.isArray(data)) {
        createArrayNode(rootElement, data, 'root');
    } else if (typeof data === 'object' && data !== null) {
        createObjectNode(rootElement, data, 'root');
    } else {
        rootElement.textContent = JSON.stringify(data);
    }
    
    container.querySelectorAll('.json-tree-key').forEach(keyElement => {
        const newKeyElement = keyElement.cloneNode(true);
        keyElement.parentNode.replaceChild(newKeyElement, keyElement);
        
        newKeyElement.addEventListener('click', function(e) {
            e.stopPropagation();
            
            const nodeContainer = this.closest('.json-tree-node');
            if (nodeContainer) {
                const contentElement = nodeContainer.querySelector('.json-tree-content');
                if (contentElement) {
                    contentElement.classList.toggle('collapsed');
                    this.classList.toggle('collapsed');
                }
            }
        });
    });
    
    container.querySelectorAll('.json-tree-content').forEach(content => {
        content.classList.remove('collapsed');
    });
}
function createObjectNode(parentElement, obj, key) {
    const nodeContainer = document.createElement('div');
    nodeContainer.className = 'json-tree-node';
    
    const keyElement = document.createElement('span');
    keyElement.className = 'json-tree-key';
    keyElement.textContent = key + ': {';
    
    const contentElement = document.createElement('div');
    contentElement.className = 'json-tree-content';
    
    parentElement.appendChild(nodeContainer);
    nodeContainer.appendChild(keyElement);
    nodeContainer.appendChild(contentElement);
    
    const entries = Object.entries(obj).sort((a, b) => a[0].localeCompare(b[0]));
    
    for (const [k, v] of entries) {
        if (Array.isArray(v)) {
            createArrayNode(contentElement, v, k);
        } else if (typeof v === 'object' && v !== null) {
            createObjectNode(contentElement, v, k);
        } else {
            const valueContainer = document.createElement('div');
            valueContainer.className = 'json-tree-leaf';
            const valueType = typeof v;
            let valueClass = 'json-tree-value';
            if (valueType === 'string') valueClass += ' string';
            else if (valueType === 'number') valueClass += ' number';
            else if (valueType === 'boolean') valueClass += ' boolean';
            else if (v === null) valueClass += ' null';
            
            const keySpan = document.createElement('span');
            keySpan.className = 'json-tree-leaf-key';
            keySpan.textContent = `${k}:`;
            
            const valueSpan = document.createElement('span');
            valueSpan.className = valueClass;
            valueSpan.textContent = formatValue(v);
            
            valueContainer.appendChild(keySpan);
            valueContainer.appendChild(valueSpan);
            contentElement.appendChild(valueContainer);
        }
    }
    
    const closeBrace = document.createElement('span');
    closeBrace.textContent = '}';
    contentElement.appendChild(closeBrace);
}

function createArrayNode(parentElement, arr, key) {
    const nodeContainer = document.createElement('div');
    nodeContainer.className = 'json-tree-node';
    
    const keyElement = document.createElement('span');
    keyElement.className = 'json-tree-key';
    keyElement.textContent = `${key}: [ // ${arr.length} items`;
    
    const contentElement = document.createElement('div');
    contentElement.className = 'json-tree-content';
    
    parentElement.appendChild(nodeContainer);
    nodeContainer.appendChild(keyElement);
    nodeContainer.appendChild(contentElement);
    
    arr.forEach((item, index) => {
        if (Array.isArray(item)) {
            createArrayNode(contentElement, item, index);
        } else if (typeof item === 'object' && item !== null) {
            createObjectNode(contentElement, item, index);
        } else {
            const valueContainer = document.createElement('div');
            valueContainer.className = 'json-tree-leaf';
            const valueType = typeof item;
            let valueClass = 'json-tree-value';
            if (valueType === 'string') valueClass += ' string';
            else if (valueType === 'number') valueClass += ' number';
            else if (valueType === 'boolean') valueClass += ' boolean';
            else if (item === null) valueClass += ' null';
            
            const keySpan = document.createElement('span');
            keySpan.className = 'json-tree-leaf-key';
            keySpan.textContent = `${index}:`;
            
            const valueSpan = document.createElement('span');
            valueSpan.className = valueClass;
            valueSpan.textContent = formatValue(item);
            
            valueContainer.appendChild(keySpan);
            valueContainer.appendChild(valueSpan);
            contentElement.appendChild(valueContainer);
        }
    });
    
    const closeBracket = document.createElement('span');
    closeBracket.textContent = ']';
    contentElement.appendChild(closeBracket);
}

function formatValue(value) {
    if (typeof value === 'string') {
        return `"${escapeHtml(value)}"`;
    } else if (typeof value === 'number' || typeof value === 'boolean') {
        return String(value);
    } else if (value === null) {
        return 'null';
    } else {
        return String(value);
    }
}

function escapeHtml(str) {
    return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}

function setupTableView(data) {
    const tableHead = document.getElementById('jsonTableHead');
    const tableBody = document.getElementById('jsonTableBody');
    
    tableHead.innerHTML = '';
    tableBody.innerHTML = '';
    
    const tableViewBtn = document.getElementById('tableViewBtn');
    
    if (Array.isArray(data) && data.length > 0 && typeof data[0] === 'object' && data[0] !== null) {
        const keys = new Set();
        data.forEach(item => {
            if (typeof item === 'object' && item !== null) {
                Object.keys(item).forEach(key => keys.add(key));
            }
        });
        
        if (keys.size > 0) {
            const headerRow = document.createElement('tr');
            keys.forEach(key => {
                const th = document.createElement('th');
                th.textContent = key;
                headerRow.appendChild(th);
            });
            tableHead.appendChild(headerRow);
            
            data.forEach(item => {
                if (typeof item === 'object' && item !== null) {
                    const row = document.createElement('tr');
                    keys.forEach(key => {
                        const td = document.createElement('td');
                        if (item.hasOwnProperty(key)) {
                            const value = item[key];
                            if (typeof value === 'object' && value !== null) {
                                td.textContent = JSON.stringify(value);
                            } else {
                                td.textContent = value;
                            }
                        }
                        row.appendChild(td);
                    });
                    tableBody.appendChild(row);
                }
            });
            
            tableViewBtn.disabled = false;
        } else {
            tableViewBtn.disabled = true;
        }
    } else {
        tableViewBtn.disabled = true;
    }
}

function findAndDisplayImages(data) {
    const imagesContainer = document.getElementById('imagesContainer');
    const resultImages = document.getElementById('resultImages');
    resultImages.innerHTML = '';
    
    const imageUrls = new Set();
    
    function findUrls(obj, path = '') {
        if (typeof obj === 'string') {
            if (isImageUrl(obj)) {
                imageUrls.add(obj);
            }
        } else if (Array.isArray(obj)) {
            obj.forEach((item, index) => {
                findUrls(item, `${path}[${index}]`);
            });
        } else if (typeof obj === 'object' && obj !== null) {
            for (const key in obj) {
                findUrls(obj[key], path ? `${path}.${key}` : key);
            }
        }
    }
    
    findUrls(data);
    
    if (imageUrls.size > 0) {
        imageUrls.forEach(url => {
            const imgContainer = document.createElement('div');
            imgContainer.className = 'image-thumbnail-container';
            
            imgContainer.innerHTML = `
                <img src="${url}" alt="Result image" class="image-thumbnail">
                <div class="image-overlay">
                    <button class="btn btn-sm btn-light image-expand-btn" aria-label="View full image">
                        <i class="fas fa-search-plus"></i>
                    </button>
                </div>
            `;
            
            resultImages.appendChild(imgContainer);
            
            const expandBtn = imgContainer.querySelector('.image-expand-btn');
            expandBtn.addEventListener('click', () => {
                window.open(url, '_blank');
            });
            const thumbnail = imgContainer.querySelector('.image-thumbnail');
            thumbnail.addEventListener('click', () => {
                window.open(url, '_blank');
            });
        });
        
        imagesContainer.classList.remove('d-none');
    } else {
        imagesContainer.classList.add('d-none');
    }
}

function isImageUrl(str) {
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg'];
    const lowercaseStr = str.toLowerCase();
    if (
        (lowercaseStr.startsWith('http://') || lowercaseStr.startsWith('https://')) &&
        imageExtensions.some(ext => lowercaseStr.endsWith(ext))
    ) {
        return true;
    }
    
    return false;
}

function validateFormParameters(form) {
    const executeBtn = form.querySelector('.execute-btn');
    const parameters = form.querySelectorAll('.param-value');
    let hasValidParams = false;
    if (parameters.length === 0) {
        executeBtn.disabled = false;
        return;
    }
    
    parameters.forEach(function(input) {
        const paramType = input.dataset.paramType;
        
        if (paramType && paramType.toLowerCase() === 'boolean') {
            hasValidParams = true;
        } else if (input.value && input.value.trim() !== '') {
            hasValidParams = true;
            if ((paramType && (paramType.toLowerCase() === 'array' || paramType.toLowerCase() === 'object'))) {
                try {
                    JSON.parse(input.value);
                    input.classList.remove('is-invalid');
                } catch (e) {
                    input.classList.add('is-invalid');
                    hasValidParams = false;
                }
            }
        }
    });
    
    executeBtn.disabled = !hasValidParams;
}
</script>

@section Styles {
    <style>
        .card {
            border-radius: 1rem;
            transition: box-shadow 0.2s;
        }
        .card:hover {
            box-shadow: 0 0 24px rgba(32,64,102,0.15);
        }
        
        /* Enhanced tool card styling */
        .list-group-item.tool-item {
            border: 3px solid #dee2e6 !important;
            border-radius: 12px !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            padding: 1.25rem;
            margin-bottom: 1.25rem;
        }
        
        .list-group-item.tool-item:hover {
            border-color: #2684ff !important;
            box-shadow: 0 10px 20px rgba(38, 132, 255, 0.15);
        }
        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #0366d6;
        }
        .tool-description {
            font-size: 0.9rem;
            color: #4a4a4a;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            max-height: 4.5em;
        }
        .btn-success {
            font-size: 1rem;
            padding: 0.75rem 1.25rem;
            min-width: 120px;
        }
        
        .execute-btn:disabled {
            cursor: not-allowed;
            opacity: 0.5;
            background-color: #75b798;
            border-color: #75b798;
            pointer-events: none;
        }
        .display-5 {
            font-size: 2.5rem;
        }
        .lead {
            font-size: 1.15rem;
        }
        .tool-result pre {
            margin-bottom: 0;
            font-size: 0.95rem;
            background: none;
            border: none;
            box-shadow: none;
        }
        /* Tool result container removed as per requirements */
        
        /* JSON Tree View styles - Modern Edition */
        .json-tree-root {
            font-family: 'Fira Mono', 'Consolas', 'Menlo', monospace;
            padding: 0.75rem;
            font-size: 0.9rem;
            line-height: 1.5;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
        
        .json-tree-node {
            margin-left: 1.75rem;
            position: relative;
            padding-left: 0.5rem;
            border-left: 1px dashed rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
        }
        
        .json-tree-node:hover {
            border-left: 1px dashed rgba(0, 0, 0, 0.3);
        }
        
        .json-tree-node:hover > .json-tree-key {
            background-color: rgba(3, 102, 214, 0.08);
        }
        
        .json-tree-key {
            color: #0366d6; /* GitHub blue */
            font-weight: 500;
            cursor: pointer;
            user-select: none;
            display: inline-flex;
            align-items: center;
            position: relative;
            padding: 2px 4px;
            border-radius: 3px;
            transition: all 0.15s ease;
        }
        
        /* Add a subtle indicator for clickable nodes */
        .json-tree-node > .json-tree-key::before {
            content: '▼';
            display: inline-block;
            font-size: 0.6rem;
            margin-right: 4px;
            color: #6a737d;
            opacity: 0.7;
            transition: transform 0.15s ease;
        }
        
        .json-tree-node > .json-tree-key.collapsed::before {
            transform: rotate(-90deg);
        }
        
        .json-tree-key:hover {
            background-color: rgba(3, 102, 214, 0.1); /* Light blue background on hover */
            text-decoration: none;
            opacity: 1;
        }
        
        /* Style for collapsed state */
        .json-tree-key.collapsed + .json-tree-content {
            display: none;
        }
        
        .json-tree-value {
            color: #e34c26; /* GitHub orange */
            padding: 0 0.25rem;
            border-radius: 3px;
        }
        
        .json-tree-value.string {
            color: #22863a; /* GitHub green */
        }
        
        .json-tree-value.number {
            color: #005cc5; /* GitHub blue */
        }
        
        .json-tree-value.boolean {
            color: #6f42c1; /* GitHub purple */
        }
        
        .json-tree-value.null {
            color: #6a737d; /* GitHub gray */
            font-style: italic;
        }
        
        .json-tree-content {
            display: block;
            animation: fadeIn 0.3s ease;
        }
        
        .json-tree-content.collapsed {
            display: none;
        }
        
        /* Using proper syntax for keyframes in CSS */
        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-3px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .json-tree-content.expanded {
            display: block !important;
            animation: fadeIn 0.3s ease;
        }
        
        .json-tree-leaf {
            margin-left: 1.75rem;
        }
        
        .json-tree-leaf:hover {
            background-color: rgba(0, 0, 0, 0.03);
        }
        
        .json-tree-leaf-key {
            color: #6a737d;
            margin-right: 0.25rem;
            font-weight: 500;
        }
        
        /* Add expand/collapse all functionality */
        .json-tree-controls {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 0.5rem;
            gap: 0.5rem;
        }
        
        .json-tree-control-btn {
            font-size: 0.8rem;
            padding: 0.2rem 0.5rem;
            background-color: #f1f2f3;
            border: 1px solid #d0d7de;
            border-radius: 4px;
            cursor: pointer;
            color: #0366d6;
            transition: all 0.2s ease;
        }
        
        .json-tree-control-btn:hover {
            background-color: #e9ecef;
            border-color: #c0c7d0;
        }
        
        /* View toggle buttons */
        .view-options .btn-group {
            margin-left: 15px;
        }
        
        /* Modern JSON Tree container */
        .modern-json-tree {
            background-color: #f8fafb;
            box-shadow: inset 0 0 0 1px rgba(0,0,0,.1);
            border-radius: 8px;
        }
        
        /* Image thumbnail enhancements */
        .image-thumbnail-container {
            display: inline-block;
            margin: 5px;
            border: 1px solid #e3e6ea;
            border-radius: 4px;
            overflow: hidden;
            width: 100px;
            height: 100px;
            position: relative;
        }
        
        .image-thumbnail {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.2s ease;
        }
        
        .image-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        .image-thumbnail-container:hover .image-overlay {
            opacity: 1;
        }
        
        /* Parameter collapse transition */
        .tool-parameters.collapse {
            transition: height 0.3s ease;
        }
        
        .toggle-icon {
            transition: transform 0.3s ease;
        }
        
        .toggle-icon.fa-rotate-180 {
            transform: rotate(180deg);
        }
        
        .image-thumbnail-container:hover .image-thumbnail {
            transform: scale(1.1);
        }
    </style>
}
