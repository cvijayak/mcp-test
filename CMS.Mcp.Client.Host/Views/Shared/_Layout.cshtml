@using System.Security.Claims
@using CMS.Mcp.Client.Contracts

@inject IClaimStore ClaimStore
@{
    var versionId = typeof(Program).Assembly.GetName().Version.ToString().Replace(".", "_");

    var fullName = $"{(ClaimStore.GetValue(ClaimTypes.GivenName) ?? string.Empty)} {(ClaimStore.GetValue(ClaimTypes.Surname) ?? string.Empty)}";
    var email = User.FindFirst(ClaimTypes.Email)?.Value;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat</title>
    <base href="/" />
    <link rel="icon" type="image/svg+xml" href="/mcp/images/logo-icon.svg">
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" crossorigin rel="preconnect">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" rel="stylesheet">
    <link href="/mcp/css/site.css?v=@versionId" rel="stylesheet">
    <link href="/mcp/css/header.css?v=@versionId" rel="stylesheet">
    <link href="/mcp/css/chat.css?v=@versionId" rel="stylesheet">
    
    @await RenderSectionAsync("Styles", required: false)
</head>

<body>
    <div id="header">
        <nav class="navbar navbar-expand-lg navbar-light">

            <div class="logo-container">
                <a href="@Url.Action("Index", "Chat")">
                    <img class="logo-icon"
                         src="/mcp/images/logo.svg"
                         alt="logo">
                </a>
                <span class="navbar-brand ms-3"></span>
            </div>

            <div class="navbar-nav">
                <a class="nav-link @(ViewContext.RouteData.Values["controller"].ToString() == "Chat" ? "active" : "")" 
                   href="@Url.Action("Index", "Chat")" title="Chat">
                    <i class="fas fa-comments" aria-hidden="true"></i>
                </a>
                <a class="nav-link" href="#" role="button"
                   id="profileDropdown" data-bs-toggle="dropdown"
                   aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-user"></i>
                </a>
                <ul class="dropdown-menu dropdown-menu-right"
                    aria-labelledby="profileDropdown">
                    <li class="dropdown-header">
                        <div class="flex-container justify-content-between align-items-center w-100">
                            <div class="app-name" id="applicationName">AI Chat Assistant</div>
                            <a class="logout-link" id="logoutItem" href="/mcp/account/logout">
                                Logout
                            </a>
                        </div>
                    </li>
                    <li class="dropdown-header">
                        <div class="user-info flex-container align-items-center">
                            <i class="fas fa-user-circle user-icon"></i>
                            <div class="user-details ms-3">
                                <div class="user-name">@fullName</div>
                                <div class="user-email">@email</div>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </nav>
    </div>

    <div class="container-fluid mt-3">
        @RenderBody()
    </div>

    <div id="spinnerContainer" class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" role="status" style="width: 4rem; height: 4rem; color: #204066;">
        </div>
    </div>
    

    <div class="dialog-overlay" id="refreshModal" style="display: none">
        <div class="dialog-box">
            <h3>Session Expired</h3>
            <p>The session is no longer available or expired. Please click to refresh the page.</p>
            <div class="dialog-button-container">
                <button onclick="closeRefreshModal()">OK</button>
            </div>
        </div>
    </div>

    <div class="dialog-overlay" id="logoutModal" style="display: none">
        <div class="dialog-box">
            <h3>Session Expired</h3>
            <p>The session is no longer available or expired. Please click to logout from the page.</p>
            <div class="dialog-button-container">
                <button onclick="closeLogoutModal()">OK</button>
            </div>
        </div>
    </div>

    <div class="freeze-overlay" id="freeze-ui"></div>
    
    <!-- Chat Modal -->
    <div id="chatModal" class="chat-modal">
        <div class="chat-modal-content">
            <div class="chat-modal-header">
                <h5 class="chat-modal-title">AI Chat Assistant</h5>
                <button id="closeChatBtn" class="chat-close-button">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="chat-modal-body">
                <div id="modalChatContainer" class="chat-container mb-3">
                    <div id="modalChatMessages" class="chat-messages"></div>
                    <div id="modalLoadingIndicator" class="d-none text-center my-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="input-group">
                    <input type="text" id="modalMessageInput" class="form-control" placeholder="Type your message..." />
                    <button id="modalSendMessageBtn" class="btn btn-primary">
                        <i class="fas fa-paper-plane"></i> Send
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <script>
        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)

    <script>
        function updateApplicationName(appName) {
            document.getElementById("applicationName").innerText = appName;
        }

        let isRefreshModalShown = false;
        let isLogoutModalShown = false;

        function showErrorModal(action) {
            if (action === 'refresh' && !isRefreshModalShown) {
                document.getElementById('refreshModal').style.display = 'flex';
                isRefreshModalShown = true;
            } else if (action === 'logout' && !isLogoutModalShown) {
                document.getElementById('logoutModal').style.display = 'flex';
                isLogoutModalShown = true;
            }
        }

        function closeRefreshModal() {
            document.getElementById('refreshModal').style.display = 'none';
            isRefreshModalShown = false;
            window.location.reload();
        }

        function closeLogoutModal() {
            document.getElementById('logoutModal').style.display = 'none';
            isLogoutModalShown = false;
            window.location = '/mcp/account/logout';
        }

        var checkSessionIntervalID;
        function checkSession() {
            fetch('/mcp/account/check-session', { method: 'GET', credentials: 'include' })
                .then(response => {
                    if (response.status === 200) {
                        console.log('Session is active.');
                    } else if (response.status === 401) {
                        // Session expired, perform logout instead of just showing modal
                        console.log('Session expired, logging out...');
                        window.location = '/mcp/account/logout';
                        clearInterval(checkSessionIntervalID);
                        checkSessionIntervalID = null;
                    }
                })
                .catch(error => {
                    console.error('Error checking session:', error);
                    // On error, also perform logout instead of showing modal
                    console.log('Session check error, logging out...');
                    window.location = '/mcp/account/logout';
                    clearInterval(checkSessionIntervalID);
                    checkSessionIntervalID = null;
                });
        }

        const pagesToCheck = ['/mcp/home', '/mcp/home/index'];

        if (pagesToCheck.includes(window.location.pathname)) {
            checkSessionIntervalID = setInterval(checkSession, 60000);
        }
    </script>
    
    <!-- Custom helper scripts -->
    <script>
        // Simple utility functions
        window.getBaseUrl = function() {
            return window.location.origin;
        };
    </script>
    
    <!-- Custom script to support chat functionality -->
    <script>
        // Hide spinner when page loads
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('spinnerContainer').style.display = 'none';
            
            // Initialize chat modal functionality
            initChatModal();
        });
        
        function closeRefreshModal() {
            document.getElementById('refreshModal').style.display = 'none';
            window.location.reload();
        }
        
        // Chat Modal Functionality
        function initChatModal() {
            const chatModal = document.getElementById('chatModal');
            const closeChatBtn = document.getElementById('closeChatBtn');
            const modalMessageInput = document.getElementById('modalMessageInput');
            const modalSendMessageBtn = document.getElementById('modalSendMessageBtn');
            const modalChatMessages = document.getElementById('modalChatMessages');
            const modalLoadingIndicator = document.getElementById('modalLoadingIndicator');
            
            // State variables
            let chatMessages = [];
            let isModalOpen = false;
            let chatModalSessionIntervalID = null;
            
            console.log('Chat modal initialized');
            
            // Event listeners
            
            if (closeChatBtn) {
                closeChatBtn.addEventListener('click', toggleChatModal);
            }
            
            // Function to check authentication before showing chat
            function checkAuthAndToggleChat() {
                fetch('/mcp/account/check-session', { 
                    method: 'GET', 
                    credentials: 'include',
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(response => {
                    if (response.status === 200) {
                        toggleChatModal();
                    } else if (response.status === 401) {
                        console.log('User not authenticated, redirecting to login');
                        window.location = '/mcp/account/login';
                    } else {
                        console.error('Unexpected response:', response.status);
                    }
                })
                .catch(error => {
                    console.error('Error checking authentication:', error);
                    window.location = '/mcp/account/login';
                });
            }
            
            // Add resize observer to handle manual resizing
            const resizeObserver = new ResizeObserver(() => {
                if (isModalOpen) {
                    // Adjust scroll position when resizing
                    modalChatMessages.scrollTop = modalChatMessages.scrollHeight;
                }
            });
            
            resizeObserver.observe(chatModal);
            
            
            if (modalSendMessageBtn) {
                modalSendMessageBtn.addEventListener('click', sendModalMessage);
            }
            
            if (modalMessageInput) {
                modalMessageInput.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendModalMessage();
                    }
                });
            }
            
            // chatModalSessionIntervalID is defined above
            
            function toggleChatModal() {
                isModalOpen = !isModalOpen;
                chatModal.style.display = isModalOpen ? 'flex' : 'none';
                
                if (isModalOpen) {
                    fetchChatMessages();
                    modalMessageInput.focus();
                    
                    // Restore saved dimensions if available
                    const savedWidth = localStorage.getItem('chatModalWidth');
                    const savedHeight = localStorage.getItem('chatModalHeight');
                    
                    if (savedWidth && savedHeight) {
                        chatModal.style.width = savedWidth;
                        chatModal.style.height = savedHeight;
                    }
                    
                    // Start session check interval when modal is opened
                    if (!chatModalSessionIntervalID) {
                        chatModalSessionIntervalID = setInterval(checkModalSessionStatus, 30000); // Check every 30 seconds while chat is open
                    }
                } else {
                    // Save current dimensions before closing
                    localStorage.setItem('chatModalWidth', chatModal.style.width || '380px');
                    localStorage.setItem('chatModalHeight', chatModal.style.height || '550px');
                    
                    // Clear interval when modal is closed
                    if (chatModalSessionIntervalID) {
                        clearInterval(chatModalSessionIntervalID);
                        chatModalSessionIntervalID = null;
                    }
                }
            }
            
            function fetchChatMessages() {
                console.log('Fetching chat messages');
                modalLoadingIndicator.classList.remove('d-none');
                
                fetch('/mcp/chat/GetMessages')
                    .then(response => {
                        console.log('GetMessages response status:', response.status);
                        console.log('GetMessages response ok:', response.ok);
                        
                        if (!response.ok) {
                            // Check if it's an unauthorized error (session expired)
                            if (response.status === 401) {
                                console.log('Session expired while fetching messages, logging out...');
                                window.location = '/mcp/account/logout';
                                return null;
                            }
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('GetMessages response data:', data);
                        if (data) {
                            chatMessages = data.filter(msg => !msg.isProcessing);
                            console.log('Updated chat messages:', chatMessages);
                            renderModalMessages();
                        } else {
                            console.log('No data received from GetMessages');
                        }
                        modalLoadingIndicator.classList.add('d-none');
                    })
                    .catch(error => {
                        console.error('Error fetching messages:', error);
                        modalLoadingIndicator.classList.add('d-none');
                    });
            }
            
            // Add session check for the chat modal
            function checkModalSessionStatus() {
                fetch('/mcp/account/check-session', { method: 'GET', credentials: 'include' })
                    .then(response => {
                        if (!response.ok) {
                            // If session is invalid, logout
                            console.log('Session expired in chat modal, logging out...');
                            window.location = '/mcp/account/logout';
                        }
                    })
                    .catch(error => {
                        console.error('Error checking session:', error);
                        // On error, also perform logout
                        window.location = '/mcp/account/logout';
                    });
            }
                    chatModal.style.width = '100vw';
                    chatModal.style.height = '100vh';
                    return;
                }
                
                // Clear input
                modalMessageInput.value = '';
                
                // Show loading
                modalLoadingIndicator.classList.remove('d-none');
                
                // Add user message immediately
                const userMessage = {
                    role: 0, // User role
                    content: content,
                    timestamp: new Date().toISOString()
                };
                chatMessages.push(userMessage);
                renderModalMessages();
                
                // Add temporary AI "thinking" message
                const pendingMessage = {
                    role: 1, // AI role
                    content: "",
                    isProcessing: true,
                    timestamp: new Date().toISOString()
                };
                chatMessages.push(pendingMessage);
                renderModalMessages();
                
                // Send the message
                console.log('Sending message to:', '/mcp/chat/SendMessage');
                console.log('Message content:', content);
                console.log('Current chat messages:', JSON.stringify(chatMessages));
                
                fetch('/mcp/chat/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'include',
                    body: `message=${encodeURIComponent(content)}`
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    console.log('Response ok:', response.ok);
                    
                    // Check if it's an unauthorized error (session expired)
                    if (response.status === 401) {
                        console.log('Session expired while sending message, logging out...');
                        window.location = '/mcp/account/logout';
                        return null;
                    }
                    
                    if (!response.ok) {
                        console.error('Error response:', response.status, response.statusText);
                        throw new Error(`Network response was not ok: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data) {
                        // Refresh all messages from server
                        console.log('Fetching chat messages after successful send');
                        fetchChatMessages();
                    }
                })
                .catch(error => {
                    console.error('Error sending message:', error);
                    // Remove the pending message
                    chatMessages.pop();
                    // Add error message
                    chatMessages.push({
                        role: 1, // AI role
                        content: "Sorry, I encountered an error processing your request. Please try again.",
                        timestamp: new Date().toISOString()
                    });
                    renderModalMessages();
                    modalLoadingIndicator.classList.add('d-none');
                });
            }
            
            function renderModalMessages() {
                console.log('Rendering messages:', chatMessages);
                modalChatMessages.innerHTML = '';
                
                if (!chatMessages || chatMessages.length === 0) {
                    console.log('No messages to display');
                    modalChatMessages.innerHTML = `
                        <div class="text-center text-muted my-5">
                            <i class="fas fa-comments fa-3x mb-3"></i>
                            <p>Start a conversation with the AI assistant</p>
                        </div>
                    `;
                    return;
                }
                
                console.log(`Displaying ${chatMessages.length} messages`);
                chatMessages.forEach((message, index) => {
                    console.log(`Rendering message ${index}:`, message);
                    const role = message.role === 0 ? 'user' : 'assistant';
                    
                    const messageElement = document.createElement('div');
                    messageElement.className = `message ${role}`;
                    
                    const time = new Date(message.timestamp).toLocaleTimeString([], { 
                        hour: '2-digit', 
                        minute: '2-digit'
                    });
                    
                    if (message.isProcessing) {
                        console.log('Rendering processing message');
                        messageElement.innerHTML = `
                            <div class="message-container">
                                <div class="message-avatar">
                                    ${role === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>'}
                                </div>
                                <div class="message-bubble">
                                    <div class="message-sender">${role === 'user' ? 'You' : 'AI Assistant'}</div>
                                    <div class="message-content">
                                        <div class="message-loading">
                                            <div class="dot"></div>
                                            <div class="dot"></div>
                                            <div class="dot"></div>
                                        </div>
                                    </div>
                                    <div class="message-time">${time}</div>
                                </div>
                            </div>
                        `;
                    } else {
                        // Format message content with markdown-like syntax and code blocks
                        console.log('Rendering normal message with content:', message.content);
                        const formattedContent = formatModalMessage(message.content);
                        
                        messageElement.innerHTML = `
                            <div class="message-container">
                                <div class="message-avatar">
                                    ${role === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>'}
                                </div>
                                <div class="message-bubble">
                                    <div class="message-sender">${role === 'user' ? 'You' : 'AI Assistant'}</div>
                                    <div class="message-content">${formattedContent}</div>
                                    <div class="message-time">${time}</div>
                                </div>
                            </div>
                        `;
                    }
                    
                    modalChatMessages.appendChild(messageElement);
                });
                
                // Scroll to bottom
                modalChatMessages.scrollTop = modalChatMessages.scrollHeight;
            }
            
            // Utility function for formatting code blocks and markdown-like syntax
            function formatModalMessage(content) {
                if (!content) return '';
                
                // Format code blocks with ```
                let formatted = content.replace(/```([^`]+)```/g, '<pre><code>$1</code></pre>');
                
                // Format inline code with `code`
                formatted = formatted.replace(/`([^`]+)`/g, '<code>$1</code>');
                
                // Format bold with **text**
                formatted = formatted.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
                
                // Format italic with *text*
                formatted = formatted.replace(/\*([^*]+)\*/g, '<em>$1</em>');
                
                // Replace newlines with <br>
                formatted = formatted.replace(/\n/g, '<br>');
                
                return formatted;
            }
        }
    </script>
</body>
</html>
